@startuml evaluacion_politicas
participant avsis
participant pst_web
participant pst_core
participant gisom
pst_web -> pst_core: trainSearchManager -> updateSelectionTraveler(traveler)
pst_web -> avsis: profilesBean.getCommunitie(comunidad_id)
note left
1- ejecutar api con el campo comunidad del traveler->travelerDTo/SimpleDtoTraveler
->profilesService.communitieSearchByTokenId()
avisis retorna dentro de communities el objeto 
    "politicaTrenDto": {
        "tokenId": "string",
        "precioMaxNacional": 0,
        "existeLimite": true
    }
2- crear un objeto comunidad para almacenar la respuesta de forma global
 en el profilesBean creo el objeto private ComunidadDto comunidad;
end note
pst_web -> pst_core: trainSearchManager.search() - > standarSearch()
note right
1 - tomar los datos guardados de politicas y convertirlas en el tipo CommunityPolicies
del objeto GetTrainFareCombinationRequest por medio del metodo 
SetCommunityPoliciesInRequest() global 
2 - el response trainService.search(request) debera traer una lista de politicas incumplidas
por cada propuesta encontrada 
3- con el metodo  priceResponseBuilder.build se convierten las propuestas al tipo
searcproposal se agregan  List<String> unfulfilledPolicies; y se setean apartir 
del el FareCombination
4- colocar menseja de alerta en la vista de propuestas
end note
pst_web -> pst_web: dibujar mensaje en TrainPriceAvail
note right
 <h:panelGroup style="margin-top: 10px; display: block;" rendered="#{trainAvailBean.getUnfulfilledPolicies(proposal.unfulfilledPolicies) != null}">
   <gi:message severity="warn">
         <gi:row>#{trainAvailBean.getUnfulfilledPolicies(proposal.unfulfilledPolicies)}</gi:row>
    </gi:message>
</h:panelGroup>
end note
alt pedir_disponibilidad(getTrainFareCombination)
  
end
alt Guardo(GetTrainPurchaseRequest)

end
@enduml